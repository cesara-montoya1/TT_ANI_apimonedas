apiVersion: batch/v1
kind: Job
metadata:
  name: monedas-db-initialize
spec:
  ttlSecondsAfterFinished: null
  backoffLimit: 0
  template:
    spec:
      restartPolicy: Never
      containers:
        - name: monedas-db-initialize
          image: postgres:16
          command: ["bash", "-c"]
          args:
          - |
            # Install psql client and psmisc (for sleep)
            apt-get update && apt-get install -y postgresql-client psmisc && rm -rf /var/lib/apt/lists/*

            # Define variables
            DB_HOST="monedas-db-service" # Service name for your database
            DB_USER="postgres"
            DB_NAME_POSTGRES="postgres" # Default database for initial connection
            DB_NAME_MONEDAS="monedas"
            MAX_RETRIES=90 # Max retries for DB connection
            RETRY_INTERVAL=2 # Interval in seconds

            echo "Starting database initialization script..."

            # Wait for Postgres DB to be ready
            echo "Attempting to connect to Postgres DB at $DB_HOST..."
            for i in $(seq 1 $MAX_RETRIES); do
              psql -h "$DB_HOST" -U "$DB_USER" -d "$DB_NAME_POSTGRES" -c '\q' &>/dev/null
              if [ $? -eq 0 ]; then
                echo "Successfully connected to Postgres DB."
                break
              fi
              echo "Waiting for Postgres DB... (Attempt $i/$MAX_RETRIES)"
              sleep $RETRY_INTERVAL

              if [ $i -eq $MAX_RETRIES ]; then
                echo "Failed to connect to Postgres DB after $MAX_RETRIES retries. Exiting."
                exit 1
              fi
            done

            # Create the 'monedas' database if it does not exist
            # Using IF NOT EXISTS makes this command idempotent
            echo "Creating database '${DB_NAME_MONEDAS}' if it does not exist..."
            psql -h "$DB_HOST" -U "$DB_USER" -d "$DB_NAME_POSTGRES" -c "CREATE DATABASE IF NOT EXISTS ${DB_NAME_MONEDAS};"
            if [ $? -eq 0 ]; then
                echo "Database '${DB_NAME_MONEDAS}' created or already exists."
            else
                echo "Failed to create database '${DB_NAME_MONEDAS}'. Exiting."
                exit 1
            fi

            # Wait for the 'monedas' database to be ready
            echo "Attempting to connect to '${DB_NAME_MONEDAS}' DB..."
            for i in $(seq 1 $MAX_RETRIES); do
              psql -h "$DB_HOST" -U "$DB_USER" -d "$DB_NAME_MONEDAS" -c '\q' &>/dev/null
              if [ $? -eq 0 ]; then
                echo "Successfully connected to '${DB_NAME_MONEDAS}' DB."
                break
              fi
              echo "Waiting for '${DB_NAME_MONEDAS}' DB... (Attempt $i/$MAX_RETRIES)"
              sleep $RETRY_INTERVAL

              if [ $i -eq $MAX_RETRIES ]; then
                echo "Failed to connect to '${DB_NAME_MONEDAS}' DB after $MAX_RETRIES retries. Exiting."
                exit 1
              fi
            done

            # Execute SQL scripts
            echo "Executing DDL_monedas.sql..."
            psql -h "$DB_HOST" -U "$DB_USER" -d "$DB_NAME_MONEDAS" -f /scripts/DDL_monedas.sql
            if [ $? -ne 0 ]; then
                echo "Failed to execute DDL_monedas.sql. Exiting."
                exit 1
            fi
            echo "DDL_monedas.sql executed successfully."

            echo "Executing DML_monedas.sql..."
            psql -h "$DB_HOST" -U "$DB_USER" -d "$DB_NAME_MONEDAS" -f /scripts/DML_monedas.sql
            if [ $? -ne 0 ]; then
                echo "Failed to execute DML_monedas.sql. Exiting."
                exit 1
            fi
            echo "DML_monedas.sql executed successfully."
            echo "Database initialization complete. Exiting with success."
            exit 0 # Explicitly exit with success
        env:
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: monedas-db-secrets
              key: MONEDAS_DB_PASSWORD
        volumeMounts:
        - name: scripts
          mountPath: /scripts
      volumes:
      - name: scripts
        configMap: 
          name: monedas-db-cm-init
